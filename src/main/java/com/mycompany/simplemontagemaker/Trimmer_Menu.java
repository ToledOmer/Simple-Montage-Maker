/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.simplemontagemaker;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.JFrame;

public class Trimmer_Menu extends javax.swing.JFrame {

    private String curDir = "";
    private LinkedList<File> files = new LinkedList<>();
    private Map<String, Long> itemMapLong = new HashMap<>();
    private Map<String, Integer> itemMapInt = new HashMap<>();
    private File curFilePath;

    static Map<Future<String>, String> progMap;
    private ExecutorService executor;
    static LinkedBlockingQueue fList;

    /**
     * Creates new form Compressor_Menu
     */
    public Trimmer_Menu() {

        initComponents();

        ////////////////////////////
        //Exception in thread
        //"main" java.lang.IllegalStateException: Toolkit not initialized
        com.sun.javafx.application.PlatformImpl.startup(() -> {
        });
        ///////////////////////
        progMap = Settings.getProgMap();
        executor = Settings.getExecutor();
        fList = Settings.getfList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileListTocCompress1 = new javax.swing.JList<>();
        trim_one = new javax.swing.JButton();
        currFile = new java.awt.Label();
        start_time_lable1 = new java.awt.Label();
        end_time_lable2 = new java.awt.Label();
        end_hours_label = new java.awt.Label();
        start_hours_label1 = new java.awt.Label();
        dur_hours_label2 = new java.awt.Label();
        start_min_label3 = new java.awt.Label();
        end_min_label4 = new java.awt.Label();
        dur_min_label5 = new java.awt.Label();
        start_second_label6 = new java.awt.Label();
        end_sec_label7 = new java.awt.Label();
        dur_second_label8 = new java.awt.Label();
        start_hour_Field1 = new javax.swing.JTextField();
        start_min_Field2 = new javax.swing.JTextField();
        start_second_Field3 = new javax.swing.JTextField();
        end_min_Field4 = new javax.swing.JTextField();
        end_hour_Field2 = new javax.swing.JTextField();
        dur_hour_Field3 = new javax.swing.JTextField();
        dur_min_Field5 = new javax.swing.JTextField();
        dur_box = new java.awt.Checkbox();
        dur_sec_f = new javax.swing.JTextField();
        end_sec_f1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        curr_file_prop = new javax.swing.JTextPane();
        jButton2 = new javax.swing.JButton();
        select_utton3 = new javax.swing.JButton();
        show_file_name_CheckBox1 = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        Prog_Jlist1 = new javax.swing.JList<>();
        in_prog_label1 = new java.awt.Label();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Files Trimmer");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(893, 518));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setText("Add file/s");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        fileListTocCompress1.setModel(new javax.swing.AbstractListModel<String >() {
            String[] names = getNamesArray(files);
            public int getSize() { return names.length; }
            public String getElementAt(int i) { return names[i]; }
        });
        fileListTocCompress1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileListTocCompress1MouseClicked(evt);
            }
        });
        fileListTocCompress1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileListTocCompress1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(fileListTocCompress1);

        trim_one.setText("Trimm/cut current file");
        trim_one.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trim_oneMouseClicked(evt);
            }
        });
        trim_one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trim_oneActionPerformed(evt);
            }
        });

        currFile.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        currFile.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        currFile.setText("Current File:");

        start_time_lable1.setText("Start Time");

        end_time_lable2.setText("End Time");

        end_hours_label.setText("Hours:");

        start_hours_label1.setText("Hours:");

        dur_hours_label2.setText("Hours:");

        start_min_label3.setText("Minutes:");

        end_min_label4.setText("Minutes:");

        dur_min_label5.setText("Minutes:");

        start_second_label6.setText("Seconds:");

        end_sec_label7.setText("Seconds:");

        dur_second_label8.setText("Seconds:");

        start_hour_Field1.setText("00");
        start_hour_Field1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_hour_Field1ActionPerformed(evt);
            }
        });

        start_min_Field2.setText("00");

        start_second_Field3.setText("00");

        end_min_Field4.setText("00");

        end_hour_Field2.setText("00");

        dur_hour_Field3.setEditable(false);
        dur_hour_Field3.setBackground(Color.LIGHT_GRAY);
        dur_hour_Field3.setText("00");

        dur_min_Field5.setEditable(false);
        dur_min_Field5.setBackground(Color.LIGHT_GRAY);
        dur_min_Field5.setText("00");

        dur_box.setLabel("Duration");
        dur_box.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
                dur_boxAncestorMoved(evt);
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
            }
        });
        dur_box.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dur_boxMouseClicked(evt);
            }
        });

        dur_sec_f.setEditable(false);
        dur_sec_f.setBackground(Color.LIGHT_GRAY);
        dur_sec_f.setText("00");

        dur_sec_f.setEditable(false);
        dur_sec_f.setBackground(Color.LIGHT_GRAY);
        end_sec_f1.setText("00");

        curr_file_prop.setEditable(false);
        jScrollPane2.setViewportView(curr_file_prop);

        jButton2.setText("Open File");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        select_utton3.setText("Select File");

        show_file_name_CheckBox1.setText("Show File Name Only");
        show_file_name_CheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                show_file_name_CheckBox1MouseClicked(evt);
            }
        });

        Prog_Jlist1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] names = {};
            public int getSize() { return names.length; }
            public String getElementAt(int i) { return names[i]; }
        });
        jScrollPane4.setViewportView(Prog_Jlist1);

        in_prog_label1.setText("In Progress:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(trim_one, javax.swing.GroupLayout.DEFAULT_SIZE, 936, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(currFile, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                                .addGap(160, 160, 160))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dur_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dur_hours_label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dur_hour_Field3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dur_min_label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dur_min_Field5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dur_second_label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dur_sec_f))
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(start_time_lable1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(end_time_lable2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(end_hours_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(end_hour_Field2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(start_hours_label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(start_hour_Field1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(end_min_label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(end_min_Field4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(start_min_label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(start_min_Field2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(end_sec_label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(end_sec_f1))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(start_second_label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(start_second_Field3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(1, 1, 1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(in_prog_label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(show_file_name_CheckBox1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(select_utton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(currFile, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(start_second_label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(start_second_Field3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(end_sec_label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(end_sec_f1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(start_min_label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(start_min_Field2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(start_time_lable1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(start_hours_label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(start_hour_Field1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(end_min_label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(end_min_Field4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(end_time_lable2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(end_hours_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(end_hour_Field2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(dur_min_label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(dur_min_Field5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(dur_hour_Field3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(dur_hours_label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(dur_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(dur_sec_f, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dur_second_label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(show_file_name_CheckBox1)
                    .addComponent(in_prog_label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(select_utton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(trim_one, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String path = "";
        JFileChooser chooser = new JFileChooser();
//        chooser.setCurrentDirectory(new java.io.File("."));
        if (!curDir.equals("")) {
            chooser.setCurrentDirectory(new java.io.File(curDir));
        }
        chooser.setDialogTitle("Choose Video File/s");
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setMultiSelectionEnabled(true);
        chooser.addChoosableFileFilter(new FileTypeFilter(".mp4", "video format"));
        chooser.addChoosableFileFilter(new FileTypeFilter(".flv", "video format"));
        chooser.addChoosableFileFilter(new FileTypeFilter(".avi", "video format"));
        String failed = "";
        if (chooser.showDialog(this, "Select") == JFileChooser.APPROVE_OPTION) {
            curDir = chooser.getSelectedFiles()[0].getPath();
            failed = FilesFormatValid(chooser.getSelectedFiles());
            if (failed.equals("")) {
                for (File selectedFile : chooser.getSelectedFiles()) {
                    path = selectedFile.getAbsolutePath();
                    if (files.contains(new File(path))) {
                        String message = "File: " + path + " is already in the list";
                        JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                                JOptionPane.ERROR_MESSAGE);
                    } else {
                        files.add(new File(path));
                    }
                }

                fileListTocCompress1.setModel(new javax.swing.AbstractListModel<String>() {
                    String[] names = getNamesArray(files);

                    public int getSize() {
                        return names.length;
                    }

                    public String getElementAt(int i) {
                        return names[i];
                    }
                });
            } else {
                JOptionPane.showMessageDialog(this, "The file: " + failed + " is not supproted video format Type , please choose again");
                this.jButton1ActionPerformed(evt);
            }

        }


    }//GEN-LAST:event_jButton1ActionPerformed
    static void refreshProgList() {

        for (File file : Settings.deleteList) {
            file.delete();
        }

        Prog_Jlist1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] names = getProgList();

            public int getSize() {
                return names.length;
            }

            public String getElementAt(int i) {
                return names[i];
            }

        });

    }

    private void refreshFileList() {
        fileListTocCompress1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] names = nameOnly ? getNamesOnlyArr(getNamesArray()) : getNamesArray();

            public int getSize() {
                return names.length;
            }

            public String getElementAt(int i) {
                return names[i];
            }

        });

    }

    private String[] getNamesOnlyArr(String[] namesArray) {
        for (int i = 0; i < namesArray.length; i++) {
            File f = new File(namesArray[i]);
            if (f.exists()) {
                namesArray[i] = f.getName();
            } else {
                files.remove(i);
                return getNamesOnlyArr(getNamesArray());
            }
        }

        return namesArray;
    }

    private String[] getNamesArray() {
        String[] arr = new String[files.size()];
        int i = 0;
        for (File f : files) {
            if (f.exists()) {
                arr[i] = f.getAbsolutePath();
                i++;

            } else {
                files.remove(i);
                return getNamesArray();
            }
        }

        return arr;
    }

    static private String[] getProgList() {
        if (Settings.getfList() == null) {
            return new String[0];
        }
        String[] tmp = new String[Settings.getfList().size()];

        int i = 0;
        for (Object d : Settings.getfList()) {
            Future<String> future = (Future<String>) d;
            tmp[i] = (Settings.getProgMap().get(future));
            i++;
        }
        return tmp;

    }

    private void fileListTocCompress1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListTocCompress1MouseClicked
        // TODO add your handling code here:
        JList list = (JList) evt.getSource();
        Prop p = new Prop();
        if (evt.getClickCount() == 2) {
            File f = files.get(list.getSelectedIndex());
            curFilePath = f;
            currFile.setText("Current File: " + f.getParentFile().getName() + "\\" + f.getName());
            try {
                p = Compressor_Menu.getFileProp(f.getAbsolutePath());
                setProp(p);
            } catch (IOException ex) {
                Logger.getLogger(Compressor_Menu.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_fileListTocCompress1MouseClicked
    private void setProp(Prop p) {

        curr_file_prop.setText(currFile.getText() + "\n"
                + p.toString());

    }

    private void trim_oneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trim_oneMouseClicked
        try {
            // TODO add your handling code here:

            if (!CheckTrimProp()) {
                String message = "couldnt Trim, please check the numeric value of the red fields!";
                JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                        JOptionPane.ERROR_MESSAGE);

                return;

            }
        } catch (IOException ex) {
            Logger.getLogger(Trimmer_Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
        trimProp t = getTrimProp();
        String p = getCurrFile();
        String out;
        int result = -1;
        do {
            out = SaveAt();
            if (out == null) {
                Object[] options1 = {"Choose again", "Cancel"};
                String msg = "Error at choosing an output directoty\nWhat would you like to do?";
                result = JOptionPane.showOptionDialog(this, msg, "",
                        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
                        null, options1, null);

            }
            if (result == 1) {
                String message = "Trimming Failed";
                JOptionPane.showMessageDialog(new JFrame(), message, "Trimming Error!",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            result = -1;

        } while (out == null);

        Trimmer trimMis = new Trimmer(t, p, out);

        Future<String> future = executor.submit(trimMis);
        Settings.getfList().add(future);
        Settings.getProgMap().put(future, p);
        refreshProgList();
    }//GEN-LAST:event_trim_oneMouseClicked

    private String SaveAt() {
        String destName = null;
        JFileChooser chooser = new JFileChooser();
        if (curDir != null && !(curDir.equals(""))) {
            chooser.setCurrentDirectory(new File(curDir));
        }
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int option = chooser.showDialog(this, "Save At...");
        if (option == JFileChooser.APPROVE_OPTION) {
            destName = chooser.getSelectedFile().getAbsolutePath();
        } else {
            return null;

        }
        if (destName == null || !new File(destName).exists() || !new File(destName).isDirectory()) {
            String message = "Error, Please choose a directory!";
            JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                    JOptionPane.ERROR_MESSAGE);
            return SaveAt();
        }
        return destName;
    }
    private void trim_oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trim_oneActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_trim_oneActionPerformed

    private void start_hour_Field1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_hour_Field1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_start_hour_Field1ActionPerformed

    private void dur_boxAncestorMoved(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_dur_boxAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_dur_boxAncestorMoved

    private void dur_boxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dur_boxMouseClicked
        // TODO add your handling code here:
        boolean b = !dur_hour_Field3.isEditable();
        Color c = Color.lightGray;
        if (b) {
            c = Color.white;
        }
        dur_hour_Field3.setEditable(b);
        dur_min_Field5.setEditable(b);
        dur_sec_f.setEditable(b);

        dur_hour_Field3.setBackground(c);
        dur_min_Field5.setBackground(c);
        dur_sec_f.setBackground(c);
//////////////////////////////////////////////////////////////////////
        end_hour_Field2.setEditable(!b);
        end_min_Field4.setEditable(!b);
        end_sec_f1.setEditable(!b);

        if (b) {
            c = Color.lightGray;
        } else {
            c = Color.white;

        }
        end_hour_Field2.setBackground(c);
        end_min_Field4.setBackground(c);
        end_sec_f1.setBackground(c);


    }//GEN-LAST:event_dur_boxMouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:

        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }

            desktop.open(new File(getCurrFile()));
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }

    }//GEN-LAST:event_jButton2MouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        smm.setIsOpenTrim(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing
    private boolean nameOnly;

    private void show_file_name_CheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_show_file_name_CheckBox1MouseClicked
        // TODO add your handling code here:
        nameOnly = show_file_name_CheckBox1.isSelected();
        refreshFileList();
    }//GEN-LAST:event_show_file_name_CheckBox1MouseClicked

    private void fileListTocCompress1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileListTocCompress1KeyPressed
        // TODO add your handling code here:
        if (KeyEvent.VK_DELETE == evt.getKeyCode()) {

            int[] arr = fileListTocCompress1.getSelectedIndices();
            for (int i = 0; i < arr.length; i++) {
                String tmp = files.get(arr[i]).getAbsolutePath();
                if (tmp != null) {
                    File tmpFile = new File(tmp);
                    files.remove(tmpFile);
                    if (curFilePath != null && curFilePath.getAbsolutePath().equals(tmp)) {
                        curFilePath = null;
                        currFile.setText("Current File: ");
                        curr_file_prop.setText("");
                    }
                    refreshFileList();
                }
            }
        }
    }//GEN-LAST:event_fileListTocCompress1KeyPressed

    private String[] getNamesArray(LinkedList<File> list) {
        String[] arr = new String[list.size()];
        int i = 0;
        for (File f : list) {
            arr[i] = f.getAbsolutePath();
            i++;
        }

        return arr;
    }

    private String FilesFormatValid(File[] selectedFiles) {
        for (File selectedFile : selectedFiles) {
            if (selectedFile.getName().endsWith(".mp4")
                    || selectedFile.getName().endsWith(".flv")
                    || selectedFile.getName().endsWith(".avi")) {
            } else {
                return selectedFile.getName();
            }
        }
        return "";

    }

    public static boolean isNumeric(String str) {
        for (char c : str.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    private String getCurrFile() {
        if (curFilePath == null) {

            String message = "couldnt compress, please check the the currect file is selelcted!";
            JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                    JOptionPane.ERROR_MESSAGE);

            currFile.setForeground(Color.red);
            return null;
        }

        return curFilePath.getAbsolutePath();
    }

    private boolean CheckTrimProp() throws IOException {
        boolean ret = true;

        if (!isNumeric(start_hour_Field1.getText())) {
            ret = false;
            start_hours_label1.setForeground(Color.red);
        } else {
            start_hours_label1.setForeground(Color.black);

        }

        if (!isNumeric(start_min_Field2.getText())) {
            ret = false;
            start_min_label3.setForeground(Color.red);
        } else {
            start_min_label3.setForeground(Color.black);

        }
        if (!isNumeric(start_second_Field3.getText())) {
            ret = false;
            start_second_label6.setForeground(Color.red);
        } else {
            start_second_label6.setForeground(Color.black);

        }

        if (dur_box.getState()) {
            if (!isNumeric(dur_hour_Field3.getText())) {
                ret = false;
                dur_hours_label2.setForeground(Color.red);
            } else {
                dur_hours_label2.setForeground(Color.black);

            }

            if (!isNumeric(dur_min_Field5.getText())) {
                ret = false;
                dur_min_label5.setForeground(Color.red);
            } else {
                dur_min_label5.setForeground(Color.black);

            }
            if (!isNumeric(dur_sec_f.getText())) {
                ret = false;
                dur_second_label8.setForeground(Color.red);
            } else {
                dur_second_label8.setForeground(Color.black);

            }

        } else {
            if (!isNumeric(end_hour_Field2.getText())) {
                ret = false;
                end_hours_label.setForeground(Color.red);
            } else {
                end_hours_label.setForeground(Color.black);

            }

            if (!isNumeric(end_min_Field4.getText())) {
                ret = false;
                end_min_label4.setForeground(Color.red);
            } else {

                end_min_label4.setForeground(Color.black);

            }
            if (!isNumeric(end_sec_f1.getText())) {
                ret = false;
                end_sec_label7.setForeground(Color.red);
            } else {
                end_sec_label7.setForeground(Color.black);

            }

        }
        long totalDur = trimProp.getTotalDur(curFilePath.getAbsolutePath());
        long start_hour;
        long start_min;
        long start_sec;
        long h;
        long m;
        long s;
        start_hour = Long.parseLong(start_hour_Field1.getText());
        start_min = Long.parseLong(start_min_Field2.getText());
        start_sec = Long.parseLong(start_second_Field3.getText());

        if (dur_box.getState()) {
            h = Long.parseLong(dur_hour_Field3.getText());
            m = Long.parseLong(dur_min_Field5.getText());
            s = Long.parseLong(dur_sec_f.getText());
        } else {
            h = Long.parseLong(end_hour_Field2.getText()) - start_hour;
            m = Long.parseLong(end_min_Field4.getText()) - start_min;
            s = Long.parseLong(end_sec_f1.getText()) - start_sec;

        }

        long dur = new Double((10000 * h) + (100 * m) + (s)).longValue();
        if (dur > totalDur) {
            if (dur_box.getState()) {
                dur_hours_label2.setForeground(Color.red);
                dur_min_label5.setForeground(Color.red);
                dur_second_label8.setForeground(Color.red);

            } else {
                end_hours_label.setForeground(Color.red);
                end_min_label4.setForeground(Color.red);
                end_sec_label7.setForeground(Color.red);

            }
            ret = false;
        } else {
            if (dur_box.getState()) {
                dur_hours_label2.setForeground(Color.black);
                dur_min_label5.setForeground(Color.black);
                dur_second_label8.setForeground(Color.black);

            } else {
                end_hours_label.setForeground(Color.black);
                end_min_label4.setForeground(Color.black);
                end_sec_label7.setForeground(Color.black);

            }

        }
        return ret;

    }

    private trimProp getTrimProp() {

        long start_hour;
        long start_min;
        long start_sec;
        long dur_hour;
        long dur_min;
        long dur_sec;
        start_hour = Long.parseLong(start_hour_Field1.getText());
        start_min = Long.parseLong(start_min_Field2.getText());
        start_sec = Long.parseLong(start_second_Field3.getText());

        if (dur_box.getState()) {
            dur_hour = Long.parseLong(dur_hour_Field3.getText());
            dur_min = Long.parseLong(dur_min_Field5.getText());
            dur_sec = Long.parseLong(dur_sec_f.getText());
        } else {
            dur_hour = Long.parseLong(end_hour_Field2.getText()) - start_hour;
            dur_min = Long.parseLong(end_min_Field4.getText()) - start_min;
            dur_sec = Long.parseLong(end_sec_f1.getText()) - start_sec;

        }

        return new trimProp(start_sec, start_min, start_hour, dur_sec, dur_min, dur_hour, "mp4");
    }

    public class FileTypeFilter extends FileFilter {

        private String extension;
        private String description;

        public FileTypeFilter(String extension, String description) {
            this.extension = extension;
            this.description = description;
        }

        public boolean accept(File file) {
            if (file.isDirectory()) {
                return true;
            }
            return file.getName().endsWith(extension);
        }

        public String getDescription() {
            return description + String.format(" (*%s)", extension);

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Trimmer_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Trimmer_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Trimmer_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Trimmer_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Trimmer_Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JList<String> Prog_Jlist1;
    private java.awt.Label currFile;
    private javax.swing.JTextPane curr_file_prop;
    private java.awt.Checkbox dur_box;
    private javax.swing.JTextField dur_hour_Field3;
    private java.awt.Label dur_hours_label2;
    private javax.swing.JTextField dur_min_Field5;
    private java.awt.Label dur_min_label5;
    private javax.swing.JTextField dur_sec_f;
    private java.awt.Label dur_second_label8;
    private javax.swing.JTextField end_hour_Field2;
    private java.awt.Label end_hours_label;
    private javax.swing.JTextField end_min_Field4;
    private java.awt.Label end_min_label4;
    private javax.swing.JTextField end_sec_f1;
    private java.awt.Label end_sec_label7;
    private java.awt.Label end_time_lable2;
    private javax.swing.JList<String> fileListTocCompress1;
    private java.awt.Label in_prog_label1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton select_utton3;
    private javax.swing.JCheckBox show_file_name_CheckBox1;
    private javax.swing.JTextField start_hour_Field1;
    private java.awt.Label start_hours_label1;
    private javax.swing.JTextField start_min_Field2;
    private java.awt.Label start_min_label3;
    private javax.swing.JTextField start_second_Field3;
    private java.awt.Label start_second_label6;
    private java.awt.Label start_time_lable1;
    private javax.swing.JButton trim_one;
    // End of variables declaration//GEN-END:variables
}
