/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.simplemontagemaker;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.tritonus.share.sampled.file.TAudioFileFormat;

public class Combiner_Menu extends javax.swing.JFrame {

    private String curDir = "";
    private LinkedList<File> files = new LinkedList<>();
    private Map<String, Long> itemMapLong = new HashMap<>();
//    private Map<String, String> nameAndF = new HashMap<>();
    private Map<String, Integer> itemMapInt = new HashMap<>();
    private File curFilePath;
    private String destName;
//    static Map<Future<String>, String> progMap;
//    private ExecutorService executor;
//    static LinkedBlockingQueue fList;
    private boolean nameOnly;
    private File audioFile;

    /**
     * Creates new form Compressor_Menu
     */
    public Combiner_Menu() {

        initComponents();
        Settings.init();
        ////////////////////////////
        //Exception in thread
        //"main" java.lang.IllegalStateException: Toolkit not initialized
        com.sun.javafx.application.PlatformImpl.startup(() -> {
        });
        ///////////////////////
//        progMap = Settings.getProgMap();
//        executor = Settings.getExecutor();
//        fList = Settings.getfList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileListTocCompress1 = new javax.swing.JList<>();
        trim_list = new javax.swing.JButton();
        currFile = new java.awt.Label();
        jScrollPane2 = new javax.swing.JScrollPane();
        curr_file_prop = new javax.swing.JTextPane();
        jButton2 = new javax.swing.JButton();
        select_utton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Prog_Jlist1 = new javax.swing.JList<>();
        in_prog_label1 = new java.awt.Label();
        UP_jButton3 = new javax.swing.JButton();
        down_jButton4 = new javax.swing.JButton();
        show_file_name_CheckBox1 = new javax.swing.JCheckBox();
        add_audio_checkbox = new java.awt.Checkbox();
        jScrollPane3 = new javax.swing.JScrollPane();
        audio_text_TextArea1 = new javax.swing.JTextArea();
        select_audio_fileButton5 = new javax.swing.JButton();
        mute_checkbox1 = new java.awt.Checkbox();
        label1 = new java.awt.Label();
        len_output_label = new java.awt.Label();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Video Combiner");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(893, 518));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setText("Add file/s");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        fileListTocCompress1.setModel(new javax.swing.AbstractListModel<String >() {
            String[] names = {};
            public int getSize() { return names.length; }
            public String getElementAt(int i) { return names[i]; }
        });
        fileListTocCompress1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileListTocCompress1MouseClicked(evt);
            }
        });
        fileListTocCompress1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileListTocCompress1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(fileListTocCompress1);

        trim_list.setText("Start Combining list");
        trim_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trim_listMouseClicked(evt);
            }
        });
        trim_list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trim_listActionPerformed(evt);
            }
        });

        currFile.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        currFile.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        currFile.setText("Current File:");

        curr_file_prop.setEditable(false);
        jScrollPane2.setViewportView(curr_file_prop);

        jButton2.setText("Open File");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        select_utton3.setText("Select File");

        Prog_Jlist1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] names = {};
            public int getSize() { return names.length; }
            public String getElementAt(int i) { return names[i]; }
        });
        jScrollPane4.setViewportView(Prog_Jlist1);

        in_prog_label1.setText("In Progress:");

        UP_jButton3.setText("Up");
        UP_jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UP_jButton3MouseClicked(evt);
            }
        });

        down_jButton4.setText("Down");
        down_jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                down_jButton4MouseClicked(evt);
            }
        });

        show_file_name_CheckBox1.setText("Show File Name Only");
        show_file_name_CheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                show_file_name_CheckBox1MouseClicked(evt);
            }
        });

        add_audio_checkbox.setLabel("Add Audio");

        audio_text_TextArea1.setColumns(20);
        audio_text_TextArea1.setRows(5);
        jScrollPane3.setViewportView(audio_text_TextArea1);

        select_audio_fileButton5.setText("Select Audio File");
        select_audio_fileButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                select_audio_fileButton5MouseClicked(evt);
            }
        });

        mute_checkbox1.setLabel(" Mute original audio");

        label1.setText("Output Details:");

        len_output_label.setText("Length:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(trim_list, javax.swing.GroupLayout.DEFAULT_SIZE, 936, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(currFile, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                                .addGap(160, 160, 160))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(add_audio_checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane3)
                                        .addComponent(select_audio_fileButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(mute_checkbox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(len_output_label, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(in_prog_label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(66, 66, 66)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(UP_jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(down_jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(select_utton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(show_file_name_CheckBox1)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(UP_jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(down_jButton4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(show_file_name_CheckBox1)
                        .addGap(10, 10, 10)
                        .addComponent(select_utton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(currFile, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(add_audio_checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(select_audio_fileButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(mute_checkbox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(in_prog_label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(len_output_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(trim_list, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static void refreshProgList() {
        for (File file : Settings.deleteList) {
            file.delete();
        }
        System.err.println(Prog_Jlist1 ==null);
        Prog_Jlist1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] names = getProgList();

            public int getSize() {
                return names.length;
            }

            public String getElementAt(int i) {
                return names[i];
            }

        });

    }

    static private String[] getProgList() {
        if (Settings.getfList() == null) {
            return new String[0];
        }
        String[] tmp = new String[Settings.getfList().size()];

        int i = 0;
        for (Object d : Settings.getfList()) {
            Future<String> future = (Future<String>) d;
            tmp[i] = (Settings.getProgMap().get(future));
            i++;
        }
        return tmp;

    }

    private void fileListTocCompress1Refresh() throws IOException {
        refreshFileList();
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String path = "";
        JFileChooser chooser = new JFileChooser();
//        chooser.setCurrentDirectory(new java.io.File("."));
        if (!curDir.equals("")) {
            chooser.setCurrentDirectory(new java.io.File(curDir));
        }
        chooser.setDialogTitle("Choose Video File/s");
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setMultiSelectionEnabled(true);
        chooser.addChoosableFileFilter(new FileTypeFilter(".mp4", "video format"));
        chooser.addChoosableFileFilter(new FileTypeFilter(".flv", "video format"));
        chooser.addChoosableFileFilter(new FileTypeFilter(".avi", "video format"));
        String failed = "";
        if (chooser.showDialog(this, "Select") == JFileChooser.APPROVE_OPTION) {
            curDir = chooser.getSelectedFiles()[0].getPath();
            failed = FilesFormatValid(chooser.getSelectedFiles());
            if (failed.equals("")) {
                for (File selectedFile : chooser.getSelectedFiles()) {
                    path = selectedFile.getAbsolutePath();
                    if (files.contains(new File(path))) {
                        String message = "PAY ATTENTION! File: " + path + " is already in the list";
                        JOptionPane.showMessageDialog(new JFrame(), message, "",
                                JOptionPane.WARNING_MESSAGE);
                    } 
                        File r = new File(path);
                        files.add(r);
//                        nameAndF.put(r.getName(), r.getAbsolutePath());
                    
                }

                try {
                    refreshFileList();
                } catch (IOException ex) {
                    Logger.getLogger(Combiner_Menu.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "The file: " + failed + " is not supproted video format Type , please choose again");
                this.jButton1ActionPerformed(evt);
            }

        }


    }//GEN-LAST:event_jButton1ActionPerformed


    private void fileListTocCompress1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListTocCompress1MouseClicked
        // TODO add your handling code here:
        JList list = (JList) evt.getSource();
        Prop p = new Prop();
        if (evt.getClickCount() == 2) {
            File f = files.get(fileListTocCompress1.getSelectedIndex());
            curFilePath = f;
            currFile.setText("Current File: " + f.getParentFile().getName() + "\\" + f.getName());
            try {
                p = Compressor_Menu.getFileProp(f.getAbsolutePath());
                setProp(p);
            } catch (IOException ex) {
                Logger.getLogger(Compressor_Menu.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_fileListTocCompress1MouseClicked
    private void setProp(Prop p) {

        curr_file_prop.setText(currFile.getText() + "\n"
                + p.toString());

    }

    private void trim_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trim_listMouseClicked
        //chose directory for the output 
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int option = fileChooser.showDialog(this, "Save At...");
        if (option == JFileChooser.APPROVE_OPTION) {
            destName = fileChooser.getSelectedFile().getAbsolutePath();
        } else {
            return;
        }
        boolean add = add_audio_checkbox.getState();
        boolean mute = mute_checkbox1.getState();
        Future<String> future = Settings.getExecutor().submit(new Combiner(files, destName, add, mute, getAudioPath()));

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy.MM.dd - HH.mm.ss");
        LocalDateTime now = LocalDateTime.now();
        String tmp = dtf.format(now);
        Settings.getfList().add(future);
        Settings.getProgMap().put(future, "combo list of " + files.size() + " files" + tmp + ".mp4");
        refreshProgList();

    }//GEN-LAST:event_trim_listMouseClicked

    private void trim_listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trim_listActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_trim_listActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:

        try {
            Desktop desktop = null;
            if (Desktop.isDesktopSupported()) {
                desktop = Desktop.getDesktop();
            }
            File f = new File(getCurrFile());
            desktop.open(f);

        } catch (IOException ioe) {
            ioe.printStackTrace();
        }

    }//GEN-LAST:event_jButton2MouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void show_file_name_CheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_show_file_name_CheckBox1MouseClicked
        // TODO add your handling code here:
        nameOnly = show_file_name_CheckBox1.isSelected();
        try {
            refreshFileList();
        } catch (IOException ex) {
            Logger.getLogger(Combiner_Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_show_file_name_CheckBox1MouseClicked

    private void fileListTocCompress1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileListTocCompress1KeyPressed

                if (KeyEvent.VK_DELETE == evt.getKeyCode()) {
            
            int[] arr = fileListTocCompress1.getSelectedIndices();
            for (int i= 0 ; i<arr.length; i++) {
                String tmp = files.get(arr[i]).getAbsolutePath();
                if (tmp != null) {
                    File tmpFile = new File(tmp);
                    files.remove(tmpFile);
                    if (curFilePath != null && curFilePath.getAbsolutePath().equals(tmp)) {
                        curFilePath = null;
                        currFile.setText("Current File: ");
                        curr_file_prop.setText("");
                    }
                    try {
                        refreshFileList();
                    } catch (IOException ex) {
                        Logger.getLogger(Combiner_Menu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
            }
        }
    }//GEN-LAST:event_fileListTocCompress1KeyPressed

    private void select_audio_fileButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_select_audio_fileButton5MouseClicked
        // TODO add your handling code here:
        String path = "";
        JFileChooser chooser = new JFileChooser();
//        chooser.setCurrentDirectory(new java.io.File("."));
        if (!curDir.equals("")) {
            chooser.setCurrentDirectory(new java.io.File(curDir));
        }
        chooser.setDialogTitle("Choose Audio File/s");
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setMultiSelectionEnabled(false);
        chooser.addChoosableFileFilter(new FileTypeFilter(".mp3", "video format"));
        chooser.addChoosableFileFilter(new FileTypeFilter(".wav", "video format"));
//        chooser.addChoosableFileFilter(new FileTypeFilter(".avi", "video format")); 
        String failed = "";
        if (chooser.showDialog(this, "Select") == JFileChooser.APPROVE_OPTION) {
            if (chooser.getSelectedFile().getAbsolutePath().endsWith(".mp3") || chooser.getSelectedFile().getAbsolutePath().endsWith(".wav")) {
                path = chooser.getSelectedFile().getAbsolutePath();
                audioFile = new File(path);
                try {
                    setAduioFileDetails();
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(Combiner_Menu.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Combiner_Menu.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {

                JOptionPane.showMessageDialog(this, "The file: " + failed + " is not supproted video format Type , please choose again");
                this.select_audio_fileButton5MouseClicked(evt);

            }
        } else {
        }


    }//GEN-LAST:event_select_audio_fileButton5MouseClicked

    private void UP_jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UP_jButton3MouseClicked
        // TODO add your handling code here:
        //PROBLEM - if we shoes onyl name of the file its  then
        //fileListTocCompress1.getSelectedValue() != absolute path !!!!
        //add hashmap ?!
        int index = -1;
        if (fileListTocCompress1.getSelectedIndex() != -1) {
            index = fileListTocCompress1.getSelectedIndex();
            File f = files.get(index);
            if (files.size() == 1 || index ==0) {
                return;
            }
            LinkedList<File> tmp = new LinkedList<>();
            File t2 = null;

            for (int i = 0; i < files.size(); i++) {
                File t = files.get(i);
                if (i + 1 < files.size()) {
                    t2 = files.get(i + 1);
                }

                if (i + 1 < files.size() && t2.getAbsolutePath().equals(f.getAbsolutePath())) {
                    tmp.add(t2);
                    tmp.add(t);
                    i++;
                } else {
                    tmp.add(t);
                }

            }

            files = tmp;
            try {
                refreshFileList();
            } catch (IOException ex) {
                Logger.getLogger(Combiner_Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
            fileListTocCompress1.setSelectedIndex(index - 1);
        }

    }//GEN-LAST:event_UP_jButton3MouseClicked

    private void down_jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_down_jButton4MouseClicked
        // TODO add your handling code here:
//        String s = files.get(fileListTocCompress1.getSelectedIndex());
        int index = -1;
        if (fileListTocCompress1.getSelectedIndex() != -1) {
            File f = files.get(fileListTocCompress1.getSelectedIndex());
            if (files.size() == 1) {
                return;
            }
            LinkedList<File> tmp = new LinkedList<>();
            File t2 = null;
            index = files.indexOf(f);
            if (index == files.size() - 1) {
                return;

            }
            for (int i = 0; i < files.size(); i++) {
                File t = files.get(i);
                if (index == i) {
                    tmp.add(files.get(i + 1));
                    tmp.add(t);
                    i++;
                } else {
                    tmp.add(t);

                }
            }

            files = tmp;
            try {
                refreshFileList();
            } catch (IOException ex) {
                Logger.getLogger(Combiner_Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
                        fileListTocCompress1.setSelectedIndex(index +1);

        }


    }//GEN-LAST:event_down_jButton4MouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        smm.setIsOpenComb(false);
    }//GEN-LAST:event_formWindowClosing

    private String[] getNamesArray() {
        String[] arr = new String[files.size()];
        int i = 0;
        for (File f : files) {
            if (f.exists()) {
                arr[i] = f.getAbsolutePath();
                i++;

            } else {
                files.remove(i);
                return getNamesArray();
            }
        }

        return arr;
    }

    private String FilesFormatValid(File[] selectedFiles) {
        for (File selectedFile : selectedFiles) {
            if (selectedFile.getName().endsWith(".mp4")
                    || selectedFile.getName().endsWith(".flv")
                    || selectedFile.getName().endsWith(".avi")) {
                continue;
            } else {
                return selectedFile.getName();
            }
        }
        return "";

    }

    public static boolean isNumeric(String str) {
        for (char c : str.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    private String getCurrFile() {
        if (curFilePath == null) {

            String message = "couldnt compress, please check the the currect file is selelcted!";
            JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                    JOptionPane.ERROR_MESSAGE);

            currFile.setForeground(Color.red);
            return null;
        }

        return curFilePath.getAbsolutePath();
    }

    private void refreshFileList() throws IOException{
        fileListTocCompress1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] names = nameOnly ? getNamesOnlyArr(getNamesArray()) : getNamesArray();
            
            public int getSize() {
                return names.length;
            }
            
            public String getElementAt(int i) {
                return names[i];
            }
            
        });
        LinkedList<String> pathList = new LinkedList<>();
        files.forEach((f) -> pathList.add(f.getAbsolutePath()));
        Double sum = new Double(0);
        for (String str : pathList) {
            sum += Settings.ffprobe.probe(str).getFormat().duration;;
        }
        len_output_label.setText("Length: "+ Prop.lenToString(sum));        
    }

    private String[] getNamesOnlyArr(String[] namesArray) {
        for (int i = 0; i < namesArray.length; i++) {
            File f = new File(namesArray[i]);
            if (f.exists()) {
                namesArray[i] = f.getName();
            } else {
                files.remove(i);
                return getNamesOnlyArr(getNamesArray());
            }
        }

        return namesArray;
    }

    private String getAudioPath() {
        if (!add_audio_checkbox.getState()) {
            return "";
        } else {
            return audioFile.getAbsolutePath();
        }

    }

    private void setAduioFileDetails() throws UnsupportedAudioFileException, IOException {
        String tmp = "";

        AudioFileFormat fileFormat = AudioSystem.getAudioFileFormat(audioFile);
        Map<?, ?> properties = ((TAudioFileFormat) fileFormat).properties();
        String key = "duration";
        Long microseconds = (Long) properties.get(key);
        int mili = (int) (microseconds / 1000);
        int sec = (mili / 1000) % 60;
        int min = (mili / 1000) / 60;
        System.out.println("time = " + min + ":" + sec);
        key = "duration";
        String fo = audioFile.getName().substring(audioFile.getName().lastIndexOf(".") + 1);

        tmp = "File name: " + audioFile.getName()
                + "\n length: " + min + ":" + sec
                + "\n format: " + fo;

        audio_text_TextArea1.setText(tmp);

    }

    public class FileTypeFilter extends FileFilter {

        private String extension;
        private String description;

        public FileTypeFilter(String extension, String description) {
            this.extension = extension;
            this.description = description;
        }

        public boolean accept(File file) {
            if (file.isDirectory()) {
                return true;
            }
            return file.getName().endsWith(extension);
        }

        public String getDescription() {
            return description + String.format(" (*%s)", extension);

        }

    }
    
    
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Combiner_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Combiner_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Combiner_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Combiner_Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Combiner_Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JList<String> Prog_Jlist1;
    private javax.swing.JButton UP_jButton3;
    private java.awt.Checkbox add_audio_checkbox;
    private javax.swing.JTextArea audio_text_TextArea1;
    private java.awt.Label currFile;
    private javax.swing.JTextPane curr_file_prop;
    private javax.swing.JButton down_jButton4;
    private javax.swing.JList<String> fileListTocCompress1;
    private java.awt.Label in_prog_label1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private java.awt.Label label1;
    private java.awt.Label len_output_label;
    private java.awt.Checkbox mute_checkbox1;
    private javax.swing.JButton select_audio_fileButton5;
    private javax.swing.JButton select_utton3;
    private javax.swing.JCheckBox show_file_name_CheckBox1;
    private javax.swing.JButton trim_list;
    // End of variables declaration//GEN-END:variables
}
