/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.simplemontagemaker;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.*;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;

import javax.swing.filechooser.FileFilter;
import net.bramp.ffmpeg.FFprobe;
import net.bramp.ffmpeg.probe.FFmpegFormat;
import net.bramp.ffmpeg.probe.FFmpegProbeResult;
import net.bramp.ffmpeg.probe.FFmpegStream;

/**
 *
 * @author Omer
 */
public class Compressor_Menu extends javax.swing.JFrame {

    private String curDir = "";
    private LinkedList<File> files = new LinkedList<>();
    private Map<String, Long> itemMapLong = new HashMap<>();
    private Map<String, Integer> itemMapInt = new HashMap<>();
    private File curFilePath;

    /**
     * Creates new form Compressor_Menu
     */
    public Compressor_Menu() {
        initComponents();
        initOther();
        refreshProgList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileListTocCompress1 = new javax.swing.JList<>();
        Comperss_one = new javax.swing.JButton();
        mute_box1 = new java.awt.Checkbox();
        Video_Codec = new java.awt.Label();
        resulotions_Box1 = new javax.swing.JComboBox<>();
        Audio_Bit_Rate = new java.awt.Label();
        label3 = new java.awt.Label();
        frame_label4 = new java.awt.Label();
        Audio_Codec = new java.awt.Label();
        Audio_Channels = new java.awt.Label();
        Audio_Sample_Rate_khz = new java.awt.Label();
        label8 = new java.awt.Label();
        label9 = new java.awt.Label();
        format_Box3 = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        audio_channel_Box2 = new javax.swing.JComboBox<>();
        audio_bit_rateBox4 = new javax.swing.JComboBox<>();
        audio_codec_Box5 = new javax.swing.JComboBox<>();
        video_codec_Box6 = new javax.swing.JComboBox<>();
        audio_sample_rateBox9 = new javax.swing.JComboBox<>();
        frame_Field1 = new javax.swing.JTextField();
        per_Field2 = new javax.swing.JTextField();
        label10 = new java.awt.Label();
        per1 = new java.awt.Label();
        label12 = new java.awt.Label();
        currFile = new java.awt.Label();
        jScrollPane2 = new javax.swing.JScrollPane();
        curr_file_prop = new javax.swing.JTextPane();
        audio_sample_rate_Field1 = new javax.swing.JTextField();
        audio_bit_rate_Field2 = new javax.swing.JTextField();
        Comperss_selected1 = new javax.swing.JButton();
        Audio_Sample_Rate1 = new java.awt.Label();
        Audio_Sample_Rate2 = new java.awt.Label();
        video_bit_rate_Box4 = new javax.swing.JComboBox<>();
        label13 = new java.awt.Label();
        video_bit_rate_Field3 = new javax.swing.JTextField();
        audio_sample_other = new java.awt.Label();
        audio_bit_rate_other2 = new java.awt.Label();
        video_bit_rate_other6 = new java.awt.Label();
        jScrollPane4 = new javax.swing.JScrollPane();
        Prog_Jlist1 = new javax.swing.JList<>();
        in_prog_label1 = new java.awt.Label();
        cancel_selected_prog_button = new javax.swing.JButton();
        show_file_name_CheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Files Compressor");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(893, 518));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jButton1.setText("Add file/s");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        fileListTocCompress1.setModel(new javax.swing.AbstractListModel<String >() {
            String[] names = getNamesArray(files);
            public int getSize() { return names.length; }
            public String getElementAt(int i) { return names[i]; }
        });
        fileListTocCompress1.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                fileListTocCompress1ComponentRemoved(evt);
            }
        });
        fileListTocCompress1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileListTocCompress1MouseClicked(evt);
            }
        });
        fileListTocCompress1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileListTocCompress1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(fileListTocCompress1);

        Comperss_one.setText("Compress current file");
        Comperss_one.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Comperss_oneMouseClicked(evt);
            }
        });
        Comperss_one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Comperss_oneActionPerformed(evt);
            }
        });

        mute_box1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        mute_box1.setLabel("Mute Sound");

        Video_Codec.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        Video_Codec.setText("Video Codec");

        resulotions_Box1.setModel(new javax.swing.DefaultComboBoxModel<>(

            getResolutionArr()));
    resulotions_Box1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            resulotions_Box1ActionPerformed(evt);
        }
    });

    Audio_Bit_Rate.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    Audio_Bit_Rate.setText("Audio Bit Rate");

    label3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    label3.setText("Resolution");

    frame_label4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    frame_label4.setText("frames");

    Audio_Codec.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    Audio_Codec.setText("Audio Codec");

    Audio_Channels.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    Audio_Channels.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    Audio_Channels.setText("Audio Channels");

    Audio_Sample_Rate_khz.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    Audio_Sample_Rate_khz.setText("Khz");

    label8.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    label8.setText("Video Frame Rate");

    label9.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    label9.setText("Video Bit Rate");

    format_Box3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "mp4", "avi", "flv" }));

    jButton5.setText("Set Default settings");

    audio_channel_Box2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" }));

    audio_bit_rateBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "32 kbit/s", "64 kbit/s", "other" }));
    audio_bit_rateBox4.setSelectedIndex(1);
    audio_bit_rateBox4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            audio_bit_rateBox4ActionPerformed(evt);
        }
    });

    audio_codec_Box5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "aac" }));

    video_codec_Box6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "libx264" }));

    audio_sample_rateBox9.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "48 KHz", "other" }));
    audio_sample_rateBox9.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            audio_sample_rateBox9ActionPerformed(evt);
        }
    });
    audio_sample_rateBox9.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            audio_sample_rateBox9PropertyChange(evt);
        }
    });

    frame_Field1.setText("60");

    per_Field2.setText("1");

    label10.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    label10.setText("Format");

    per1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    per1.setText("per");

    label12.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    label12.setText("second/s");

    currFile.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    currFile.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    currFile.setText("Current File:");

    curr_file_prop.setEditable(false);
    jScrollPane2.setViewportView(curr_file_prop);

    audio_sample_rate_Field1.setEditable(false);
    audio_sample_rate_Field1.setText("none");
    audio_sample_rate_Field1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            audio_sample_rate_Field1ActionPerformed(evt);
        }
    });

    audio_bit_rate_Field2.setEditable(false);
    audio_bit_rate_Field2.setText("none");
    audio_bit_rate_Field2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            audio_bit_rate_Field2ActionPerformed(evt);
        }
    });

    Comperss_selected1.setText("Compress Selected");
    Comperss_selected1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            Comperss_selected1MouseClicked(evt);
        }
    });
    Comperss_selected1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            Comperss_selected1ActionPerformed(evt);
        }
    });

    Audio_Sample_Rate1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    Audio_Sample_Rate1.setText("Audio Sample Rate");

    Audio_Sample_Rate2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    Audio_Sample_Rate2.setText("kbit/s");

    video_bit_rate_Box4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "350 kbps", "700 kbps", "1200 kbps", "2500 kbps", "5000 kbps", "other" }));
    video_bit_rate_Box4.setToolTipText("");
    video_bit_rate_Box4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            video_bit_rate_Box4ActionPerformed(evt);
        }
    });

    label13.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    label13.setText("kbps");

    video_bit_rate_Field3.setText("none");
    video_bit_rate_Field3.setEditable(false);
    video_bit_rate_Field3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            video_bit_rate_Field3ActionPerformed(evt);
        }
    });

    audio_sample_other.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    audio_sample_other.setText("other:");

    audio_bit_rate_other2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    audio_bit_rate_other2.setText("other:");

    video_bit_rate_other6.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    video_bit_rate_other6.setText("other:");

    Prog_Jlist1.setModel(new javax.swing.AbstractListModel<String>() {
        String[] names = getProgList();
        public int getSize() { return names.length; }
        public String getElementAt(int i) { return names[i]; }
    });
    jScrollPane4.setViewportView(Prog_Jlist1);

    in_prog_label1.setText("In Progress:");

    cancel_selected_prog_button.setText("Cancel Selected");
    cancel_selected_prog_button.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            cancel_selected_prog_buttonMouseClicked(evt);
        }
    });

    show_file_name_CheckBox1.setText("Show File Name Only");
    show_file_name_CheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            show_file_name_CheckBox1MouseClicked(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(cancel_selected_prog_button, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(mute_box1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 281, Short.MAX_VALUE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(format_Box3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(resulotions_Box1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(video_bit_rate_Box4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(video_bit_rate_other6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(video_bit_rate_Field3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(label13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(frame_label4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(2, 2, 2)
                                            .addComponent(frame_Field1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(per1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(Audio_Sample_Rate1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(audio_sample_rateBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(audio_sample_other, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(audio_sample_rate_Field1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(Audio_Sample_Rate_khz, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGap(2, 2, 2)
                                            .addComponent(per_Field2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Audio_Channels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(audio_channel_Box2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Audio_Codec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(audio_codec_Box5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(Audio_Bit_Rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Video_Codec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(audio_bit_rateBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(video_codec_Box6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(audio_bit_rate_other2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, 0)
                                    .addComponent(audio_bit_rate_Field2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Audio_Sample_Rate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane4)
                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2)
                        .addComponent(in_prog_label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Comperss_one, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Comperss_selected1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(show_file_name_CheckBox1)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(currFile, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(mute_box1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(16, 16, 16)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(audio_channel_Box2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(Audio_Channels, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(Audio_Codec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(audio_codec_Box5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGap(46, 46, 46))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(audio_sample_rateBox9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(Audio_Sample_Rate1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(audio_sample_other, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(Audio_Sample_Rate_khz, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGap(16, 16, 16)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(Audio_Bit_Rate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(audio_bit_rateBox4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(audio_bit_rate_other2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(audio_bit_rate_Field2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(audio_sample_rate_Field1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(13, 13, 13)
                                            .addComponent(Audio_Sample_Rate2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(10, 10, 10)
                                                    .addComponent(Video_Codec, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(13, 13, 13)
                                                    .addComponent(video_codec_Box6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGap(10, 10, 10)
                                            .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(frame_Field1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(per1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(181, 181, 181)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(label12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(per_Field2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(frame_label4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(resulotions_Box1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(format_Box3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(13, 13, 13)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(video_bit_rate_Field3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(video_bit_rate_Box4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(video_bit_rate_other6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(label13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(in_prog_label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(cancel_selected_prog_button))
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton5))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(show_file_name_CheckBox1)
                    .addGap(30, 30, 30)
                    .addComponent(Comperss_one, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(Comperss_selected1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addContainerGap(18, Short.MAX_VALUE))
    );

    resulotions_Box1.setSelectedIndex(11);
    video_bit_rate_Box4.setSelectedIndex(4);

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String path = "";
        JFileChooser chooser = new JFileChooser();
//        chooser.setCurrentDirectory(new java.io.File("."));
        if (!curDir.equals("")) {
            chooser.setCurrentDirectory(new java.io.File(curDir));
        }
        chooser.setDialogTitle("Choose Video File/s");
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setMultiSelectionEnabled(true);
        chooser.addChoosableFileFilter(new FileTypeFilter(".mp4", "video format"));
        chooser.addChoosableFileFilter(new FileTypeFilter(".flv", "video format"));
        chooser.addChoosableFileFilter(new FileTypeFilter(".avi", "video format"));
        String failed = "";
        if (chooser.showDialog(this, "Select") == JFileChooser.APPROVE_OPTION) {
            curDir = chooser.getSelectedFiles()[0].getPath();
            failed = FilesFormatValid(chooser.getSelectedFiles());
            if (failed.equals("")) {
                for (File selectedFile : chooser.getSelectedFiles()) {
                    path = selectedFile.getAbsolutePath();
                    if (files.contains(new File(path))) {
                        String message = "File: " + path + " is already in the list";
                        JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                                JOptionPane.ERROR_MESSAGE);
                    } else {
                        files.add(new File(path));
                    }
                }

                fileListTocCompress1Refresh();

            } else {
                JOptionPane.showMessageDialog(this, "The file: " + failed + " is not supproted video format Type , please choose again");
                this.jButton1ActionPerformed(evt);
            }

        }


    }//GEN-LAST:event_jButton1ActionPerformed
    private String[] getResolutionArr() {
        String[] tmp = new String[15];

        File text = new File(Settings.dir+"\\resu.txt");
        
        //Creating Scanner instnace to read File in Java
        Scanner scnr;
        try {
            scnr = new Scanner(text);
            int lineNumber = 1;
            while (scnr.hasNextLine()) {
                String line = scnr.nextLine();
                String[] t = line.split(" ");
                tmp[lineNumber - 1] = t[0] + " x " + t[1];
                lineNumber++;
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Compressor_Menu.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Reading each line of file using Scanner class
        return tmp;
    }


    private void audio_sample_rate_Field1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audio_sample_rate_Field1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_audio_sample_rate_Field1ActionPerformed

    private void resulotions_Box1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resulotions_Box1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resulotions_Box1ActionPerformed

    private void fileListTocCompress1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListTocCompress1MouseClicked
        // TODO add your handling code here:
        JList list = (JList) evt.getSource();
        Prop p = new Prop();
        if (evt.getClickCount() == 2) {
            File f = files.get(fileListTocCompress1.getSelectedIndex());
            curFilePath = f;
            currFile.setText("Current File: " + f.getParentFile().getName() + "\\" + f.getName());
            try {
                p = getFileProp(f.getAbsolutePath());
                setProp(p);
            } catch (IOException ex) {
                Logger.getLogger(Compressor_Menu.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_fileListTocCompress1MouseClicked

    private void Comperss_oneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Comperss_oneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Comperss_oneMouseClicked

    private void audio_sample_rateBox9PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_audio_sample_rateBox9PropertyChange
        // TODO add your handling code here:


    }//GEN-LAST:event_audio_sample_rateBox9PropertyChange

    private void audio_sample_rateBox9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audio_sample_rateBox9ActionPerformed
        // TODO add your handling code here:
        if (audio_sample_rateBox9.getSelectedItem().equals("other")) {
            audio_sample_rate_Field1.setEditable(true);
        } else {
            audio_sample_rate_Field1.setText("none");
            audio_sample_rate_Field1.setEditable(false);

        }


    }//GEN-LAST:event_audio_sample_rateBox9ActionPerformed

    private void audio_bit_rate_Field2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audio_bit_rate_Field2ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_audio_bit_rate_Field2ActionPerformed

    private void audio_bit_rateBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audio_bit_rateBox4ActionPerformed
        // TODO add your handling code here:
        if (audio_bit_rateBox4.getSelectedItem().equals("other")) {
            audio_bit_rate_Field2.setEditable(true);
        } else {
            audio_bit_rate_Field2.setText("none");
            audio_bit_rate_Field2.setEditable(false);

        }


    }//GEN-LAST:event_audio_bit_rateBox4ActionPerformed

    private void refreshFileList() {
                    System.out.println(nameOnly);

        fileListTocCompress1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] names = nameOnly ? getNamesOnlyArr(getNamesArray()) : getNamesArray();
        
            public int getSize() {
                return names.length;
            }

            public String getElementAt(int i) {
                return names[i];
            }

        });

    }

    private String[] getNamesOnlyArr(String[] namesArray) {
        for (int i = 0; i < namesArray.length; i++) {
            File f = new File(namesArray[i]);
            if (f.exists()) {
                namesArray[i] = f.getName();
            } else {
                files.remove(i);
                return getNamesOnlyArr(getNamesArray());
            }
        }

        return namesArray;
    }

    private String[] getNamesArray() {
        String[] arr = new String[files.size()];
        int i = 0;
        for (File f : files) {
            if (f.exists()) {
                arr[i] = f.getAbsolutePath();
                i++;

            } else {
                files.remove(i);
                return getNamesArray();
            }
        }

        return arr;
    }


    private void Comperss_selected1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Comperss_selected1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Comperss_selected1MouseClicked

    private void Comperss_selected1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Comperss_selected1ActionPerformed
        // TODO add your handling code here:
        int[] arr = fileListTocCompress1.getSelectedIndices();
        if (!checkUserProps()) {
            String message = "couldnt compress, please check the numeric value of the red fields!";
            JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                    JOptionPane.ERROR_MESSAGE);

            return;
        }
        setLablesBlack();
        if (arr.length == 0) {
            String message = "couldnt compress,please select files!";
            JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                    JOptionPane.ERROR_MESSAGE);

            return;

        }

        for (int index = 0; index < arr.length; index++) {
            String filePath = files.get(arr[index]).getAbsolutePath();
            boolean toIgnore = false;
            for (String str : Settings.getProgMap().values()) {
                if (filePath.equals(str)) {
                    ReentrantLock lock = Settings.getFileKey(str);
                    lock.lock();
                    try {
                        String msg = "file: " + filePath + " is already in progress\ndo you want to cancel him and start a new progress? ";
                        int dialogButton = JOptionPane.YES_NO_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog(new JFrame(), msg, "Cancel Progress ?", dialogButton);
                        if (dialogResult == 0) {

                            Settings.CancelProg(filePath, "comp");
                        } else {
                            toIgnore = true;
                        }
                    } finally {
                        lock.unlock();
                    }

                }

            }
            if (toIgnore) {
                //we dont want to compress this file becuase is already being comprssed, move to next filePath
                continue;
            }
            String out;
            int result = -1;
            do {
                out = SaveAt(new File(filePath).getName());
                if (out == null) {
                    Object[] options1 = {"Choose again", "Cancel"};
                    String msg = "Error at choosing an output directoty\nWhat would you like to do?";
                    result = JOptionPane.showOptionDialog(this, msg, "",
                            JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
                            null, options1, null);

                }
                if (result == 1) {
                    String message = "Compression Failed";
                    JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                            JOptionPane.ERROR_MESSAGE);
                    toIgnore = true;
                    break;
                }
                result = -1;

            } while (out == null);

            if (toIgnore) {
                //we dont want to compress this file becuase the chosse fauled at choosing dir!

                continue;
            }
            Compressor compMis = new Compressor(mute_box1.getState(), filePath, out, getUserProps());

            Future<String> future = Settings.getExecutor().submit(compMis);
            //add Future to the list, we can get return value using Future
            Settings.getfList().add(future);
            Settings.getProgMap().put(future, filePath);
            refreshProgList();
        }

    }//GEN-LAST:event_Comperss_selected1ActionPerformed

    private void Comperss_oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Comperss_oneActionPerformed
        // TODO add your handling code here:
        if (!checkUserProps()) {
            String message = "couldnt compress, please check the numeric value of the red fields!";
            JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                    JOptionPane.ERROR_MESSAGE);

            return;
        }
        setLablesBlack();
        String p = getCurrFile();
        if (p == null) {
            return;
        }
        for (String str : Settings.getProgMap().values()) {
            if (p.equals(str)) {
                ReentrantLock lock = Settings.getFileKey(p);

                lock.lock();
                try {
                    String msg = "file: " + p + " is already in progress\ndo you want to cancel him and start a new progress? ";
                    int dialogButton = JOptionPane.YES_NO_OPTION;
                    int dialogResult = JOptionPane.showConfirmDialog(new JFrame(), msg, "Cancel Progress ?", dialogButton);
                    if (dialogResult == 0) {

                        Settings.CancelProg(p, "comp");
                    }
                } finally {
                    lock.unlock();
                }
            }

        }
        String out = Settings.getInOutMap().get(p);
        if (out != null) {
            //the file will be deleted --> u should exit the program before continuing
            String message = "couldnt compress, there is a compressing task to this file, please exit the program and try again";
            JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                    JOptionPane.ERROR_MESSAGE);
            return;

        }

        int result = -1;
        do {
            out = SaveAt(new File(p).getName());
            if (out == null) {
                Object[] options1 = {"Choose again", "Cancel"};
                String msg = "Error at choosing an output directoty\nWhat would you like to do?";
                result = JOptionPane.showOptionDialog(this, msg, "",
                        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
                        null, options1, null);

            }
            if (result == 1) {
                String message = "Compression Failed";
                JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            result = -1;

        } while (out == null);

        Future<String> future = Settings.getExecutor().submit(new Compressor(mute_box1.getState(), p, out, getUserProps()));
        //add Future to the list, we can get return value using Future

        Settings.getfList().add(future);
//            Compressor.CompressFileDisAudio(p, getUserProps());

        Settings.getProgMap().put(future, p);

        refreshProgList();

//        String message = "file:\n" + p + "\ncompressd successfully";
//        JOptionPane.showMessageDialog(new JFrame(), message, "Compression success!",
//                JOptionPane.PLAIN_MESSAGE);

    }//GEN-LAST:event_Comperss_oneActionPerformed

    private void video_bit_rate_Box4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_video_bit_rate_Box4ActionPerformed
        // TODO add your handling code here:
        if (video_bit_rate_Box4.getSelectedItem().equals("other")) {
            video_bit_rate_Field3.setEditable(true);
        } else {
            video_bit_rate_Field3.setText("none");
            video_bit_rate_Field3.setEditable(false);

        }
    }//GEN-LAST:event_video_bit_rate_Box4ActionPerformed

    private void video_bit_rate_Field3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_video_bit_rate_Field3ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_video_bit_rate_Field3ActionPerformed

    private void fileListTocCompress1ComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_fileListTocCompress1ComponentRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_fileListTocCompress1ComponentRemoved

    private void fileListTocCompress1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileListTocCompress1KeyPressed
        // TODO add your handling code here:
        if (KeyEvent.VK_DELETE == evt.getKeyCode()) {

            int[] arr = fileListTocCompress1.getSelectedIndices();
            for (int i = 0; i < arr.length; i++) {
                String tmp = files.get(arr[i]).getAbsolutePath();
                if (tmp != null) {
                    File tmpFile = new File(tmp);
                    files.remove(tmpFile);
                    if (curFilePath != null && curFilePath.getAbsolutePath().equals(tmp)) {
                        curFilePath = null;
                        currFile.setText("Current File: ");
                        curr_file_prop.setText("");
                    }
                    refreshFileList();
                }
            }
        }
    }//GEN-LAST:event_fileListTocCompress1KeyPressed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowClosed

    private void cancel_selected_prog_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancel_selected_prog_buttonMouseClicked
        // TODO add your handling code here:
        String tmp = Prog_Jlist1.getSelectedValue();
        if (tmp == null) {

            return;

        }

        ReentrantLock lock = Settings.getFileKey(tmp);

        lock.lock();
        try {
            Settings.CancelProg(tmp, "comp");
        } finally {
            lock.unlock();
        }

    }//GEN-LAST:event_cancel_selected_prog_buttonMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        smm.setIsOpenComp(false);
    }//GEN-LAST:event_formWindowClosing
    private boolean nameOnly;

    private void show_file_name_CheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_show_file_name_CheckBox1MouseClicked
        // TODO add your handling code here:
        nameOnly = show_file_name_CheckBox1.isSelected();
        refreshFileList();
    }//GEN-LAST:event_show_file_name_CheckBox1MouseClicked

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:

        
    }//GEN-LAST:event_formKeyPressed

    private String[] getNamesArray(LinkedList<File> list) {
        String[] arr = new String[list.size()];
        int i = 0;
        for (File f : list) {
            arr[i] = f.getAbsolutePath();
            i++;
        }

        return arr;
    }

    private String FilesFormatValid(File[] selectedFiles) {
        for (File selectedFile : selectedFiles) {
            if (selectedFile.getName().endsWith(".mp4")
                    || selectedFile.getName().endsWith(".flv")
                    || selectedFile.getName().endsWith(".avi")) {
                continue;
            } else {
                return selectedFile.getName();
            }
        }
        return "";

    }

    private void setProp(Prop p) {

        curr_file_prop.setText(currFile.getText() + "\n"
                + p.toString());

    }

    private Prop getUserProps() {

        String forr = format_Box3.getSelectedItem().toString();
        int numOfChannel = Integer.parseInt(audio_channel_Box2.getSelectedItem().toString());
        String audioCodec = audio_codec_Box5.getSelectedItem().toString();

        int audioSampleRate;
        if (audio_sample_rate_Field1.isEditable()) {
            audioSampleRate = 1000 * Integer.parseInt(audio_sample_rate_Field1.getText());

        } else {
            int k = Integer.parseInt(audio_sample_rateBox9.getSelectedItem().toString().split(" ")[0]);
            audioSampleRate = k * 1000;

        }
        String videoCodec = video_codec_Box6.getSelectedItem().toString();
        int per = Integer.parseInt(per_Field2.getText());
        int frame = Integer.parseInt(frame_Field1.getText());
        long videoBitRate;
        if (video_bit_rate_Field3.isEditable()) {
            videoBitRate = 1024 * Long.parseLong(video_bit_rate_Field3.getText());
        } else {
            Long k = Long.parseLong(video_bit_rate_Box4.getSelectedItem().toString().split(" ")[0]);
            videoBitRate = 1024 * k;
        }
        long audioBitRate;
        if (audio_bit_rate_Field2.isEditable()) {
            audioBitRate = 1024 * Long.parseLong(audio_bit_rate_Field2.getText());
        } else {
            Long k = Long.parseLong(audio_bit_rateBox4.getSelectedItem().toString().split(" ")[0]);
            audioBitRate = k * 1024;
        }
        String[] ress = resulotions_Box1.getSelectedItem().toString().split(" x ");

        int res1 = Integer.parseInt(ress[0]);
        int res2 = Integer.parseInt(ress[1]);

        return new Prop(forr, numOfChannel, audioCodec, audioSampleRate, videoCodec, frame, per, res1, res2, videoBitRate, audioBitRate);
    }

    private boolean checkUserProps() {
        boolean isOkay = true;

        if (audio_sample_rate_Field1.isEditable() && !isNumeric(audio_sample_rate_Field1.getText())) {
            audio_sample_other.setForeground(Color.red);
            isOkay = false;
        }

        if (audio_bit_rate_Field2.isEditable() && !isNumeric(audio_bit_rate_Field2.getText())) {
            audio_bit_rate_other2.setForeground(Color.red);
            isOkay = false;

        }

        if (video_bit_rate_Field3.isEditable() && !isNumeric(video_bit_rate_Field3.getText())) {
            video_bit_rate_other6.setForeground(Color.red);
            isOkay = false;
        }

        if (!isNumeric(frame_Field1.getText())) {
            frame_label4.setForeground(Color.red);
            isOkay = false;
        }

        if (!isNumeric(per_Field2.getText())) {
            per1.setForeground(Color.red);
            isOkay = false;

        }
        return isOkay;
    }

    public static boolean isNumeric(String str) {
        for (char c : str.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    private void setLablesBlack() {
        audio_sample_other.setForeground(Color.black);
        audio_bit_rate_other2.setForeground(Color.black);
        video_bit_rate_other6.setForeground(Color.black);
        frame_label4.setForeground(Color.black);
        per1.setForeground(Color.black);
        currFile.setForeground(Color.black);

    }

    private String getCurrFile() {
        if (curFilePath == null) {

            String message = "couldnt compress, please check the the currect file is selelcted!";
            JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                    JOptionPane.ERROR_MESSAGE);

            currFile.setForeground(Color.red);
            return null;
        }

        return curFilePath.getAbsolutePath();
    }

    private void fileListTocCompress1Refresh() {
        fileListTocCompress1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] names = getNamesArray(files);

            public int getSize() {
                return names.length;
            }

            public String getElementAt(int i) {
                return names[i];
            }
        });
    }

    private void initOther() {
        Settings.initSetting();
    }

    private String SaveAt(String in) {
        String destName = null;
        JFileChooser chooser = new JFileChooser();
        if (curDir != null && !(curDir.equals(""))) {
            chooser.setCurrentDirectory(new File(curDir));
        }
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogTitle("File :" + in);
        int option = chooser.showDialog(this, "Save At...");
        if (option == JFileChooser.APPROVE_OPTION) {
            destName = chooser.getSelectedFile().getAbsolutePath();
        } else {
            return null;

        }
        if (destName == null || !new File(destName).exists() || !new File(destName).isDirectory()) {
            String message = "Error, Please choose a directory!";
            JOptionPane.showMessageDialog(new JFrame(), message, "Compression Error!",
                    JOptionPane.ERROR_MESSAGE);
            return SaveAt(in);
        }
        return destName;
    }

    public class FileTypeFilter extends FileFilter {

        private String extension;
        private String description;

        public FileTypeFilter(String extension, String description) {
            this.extension = extension;
            this.description = description;
        }

        public boolean accept(File file) {
            if (file.isDirectory()) {
                return true;
            }
            return file.getName().endsWith(extension);
        }

        public String getDescription() {
            return description + String.format(" (*%s)", extension);

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compressor_Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compressor_Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compressor_Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compressor_Menu.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Compressor_Menu().setVisible(true);
            }
        });
    }

    public static Prop getFileProp(String in) throws IOException {
        FFprobe ffprobe = Settings.getFFprobe();
        FFmpegProbeResult probeResult = ffprobe.probe(in);
        FFmpegFormat forma = probeResult.getFormat();

        FFmpegStream vidStream = probeResult.getStreams().get(0);
        FFmpegStream audioStream = probeResult.getStreams().get(1);

        String forr = forma.format_name;
        int numOfChannel = audioStream.channels;
        String audioCodec = audioStream.codec_name;
        int audioSampleRate = audioStream.sample_rate;
        String videoCodec = vidStream.codec_name;
        int per = vidStream.r_frame_rate.getDenominator();
        int frame = vidStream.r_frame_rate.getNumerator();

        long videoBitRate = vidStream.bit_rate;
        long audioBitRate = audioStream.bit_rate;
        int res1 = vidStream.width;
        int res2 = vidStream.height;
        double len = forma.duration;

        return new Prop(forr, numOfChannel, audioCodec, audioSampleRate, videoCodec, frame, per, res1, res2, videoBitRate, audioBitRate, len);
    }

    static void refreshProgList() {
            for (File file : Settings.deleteList) {
                file.delete();
            }
        

        Prog_Jlist1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] names = getProgList();

            public int getSize() {
                return names.length;
            }

            public String getElementAt(int i) {
                return names[i];
            }

        });

    }

    static String[] getProgList() {
        if (Settings.getfList() == null) {
            return new String[0];
        }
        String[] tmp = new String[Settings.getfList().size()];

        int i = 0;
        for (Object d : Settings.getfList()) {
            Future<String> future = (Future<String>) d;
            tmp[i] = (Settings.getProgMap().get(future));
            i++;
        }
        return tmp;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label Audio_Bit_Rate;
    private java.awt.Label Audio_Channels;
    private java.awt.Label Audio_Codec;
    private java.awt.Label Audio_Sample_Rate1;
    private java.awt.Label Audio_Sample_Rate2;
    private java.awt.Label Audio_Sample_Rate_khz;
    private javax.swing.JButton Comperss_one;
    private javax.swing.JButton Comperss_selected1;
    public static javax.swing.JList<String> Prog_Jlist1;
    private java.awt.Label Video_Codec;
    private javax.swing.JComboBox<String> audio_bit_rateBox4;
    private javax.swing.JTextField audio_bit_rate_Field2;
    private java.awt.Label audio_bit_rate_other2;
    private javax.swing.JComboBox<String> audio_channel_Box2;
    private javax.swing.JComboBox<String> audio_codec_Box5;
    private java.awt.Label audio_sample_other;
    private javax.swing.JComboBox<String> audio_sample_rateBox9;
    private javax.swing.JTextField audio_sample_rate_Field1;
    private javax.swing.JButton cancel_selected_prog_button;
    private java.awt.Label currFile;
    private javax.swing.JTextPane curr_file_prop;
    private javax.swing.JList<String> fileListTocCompress1;
    private javax.swing.JComboBox<String> format_Box3;
    private javax.swing.JTextField frame_Field1;
    private java.awt.Label frame_label4;
    private java.awt.Label in_prog_label1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private java.awt.Label label10;
    private java.awt.Label label12;
    private java.awt.Label label13;
    private java.awt.Label label3;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private java.awt.Checkbox mute_box1;
    private java.awt.Label per1;
    private javax.swing.JTextField per_Field2;
    private javax.swing.JComboBox<String> resulotions_Box1;
    private javax.swing.JCheckBox show_file_name_CheckBox1;
    private javax.swing.JComboBox<String> video_bit_rate_Box4;
    private javax.swing.JTextField video_bit_rate_Field3;
    private java.awt.Label video_bit_rate_other6;
    private javax.swing.JComboBox<String> video_codec_Box6;
    // End of variables declaration//GEN-END:variables
}
